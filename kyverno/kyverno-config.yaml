# Admin permission for Kyverno
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kyverno-generate-rolebindings
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
# Give Kyverno permission to create rolebindings 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kyverno-generate-rolebindings
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno-generate-rolebindings
subjects:
- kind: ServiceAccount
  name: kyverno-background-controller
  namespace: kyverno

---
# Service Account for DB team access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-team-sa
  namespace: kube-system
automountServiceAccountToken: false # Security best practice, prevent automount token

---
# Admin permission for db-team but only when bound to namespace 
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-team-full-access
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
# Kyverno policy to automatically create RoleBinding in namespaces with team=db label and give Admin permissions
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: db-team-rolebinding
  annotations:
    policies.kyverno.io/title: "Auto-create RoleBinding for DB Team"
    policies.kyverno.io/category: "RBAC"
    policies.kyverno.io/description: "Automatically creates a RoleBinding granting full access to db-team service account when namespace has team=db label"
spec:
  rules:
  - name: create-db-team-rolebinding
    match:
      any:
      - resources:
          kinds:
          - Namespace
          operations:
          - CREATE
          - UPDATE
    preconditions:
      all:
      - key: "{{ request.object.metadata.labels.team || '' }}"
        operator: Equals
        value: "db"
    generate:
      synchronize: true
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      name: db-team-full-access
      namespace: "{{ request.object.metadata.name }}"
      data:
        metadata:
          name: db-team-full-access
          namespace: "{{ request.object.metadata.name }}"
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: db-team-full-access
        subjects:
        - kind: ServiceAccount
          name: db-team-sa
          namespace: kube-system

---
# Secret to create a long-lived token for the service account
apiVersion: v1
kind: Secret
metadata:
  name: db-team-sa-token
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: db-team-sa
type: kubernetes.io/service-account-token

---
# Allows DB team to discover and manage namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-team-namespace-manager
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch", "delete"]  # Delete allowed but restricted by Kyverno policy

---
# ClusterRoleBinding to grant namespace management permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: db-team-namespace-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: db-team-namespace-manager
subjects:
- kind: ServiceAccount
  name: db-team-sa
  namespace: kube-system

---
# Kyverno policy to block deletion of namespaces without team=db label
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-db-team-namespace-deletion
  annotations:
    policies.kyverno.io/title: "Restrict DB Team Namespace Deletion"
    policies.kyverno.io/category: "Security"
    policies.kyverno.io/description: "Block deletion of namespaces without team=db label by db-team-sa"
spec:
  validationFailureAction: enforce
  background: false
  rules:
  - name: block-non-db-namespace-deletion
    match:
      any:
      - resources:
          kinds:
          - Namespace
          operations:
          - DELETE
    validate:
      message: "Access denied: db-team-sa can only delete namespaces with team=db label"
      deny:
        conditions:
          all:
          - key: "{{ request.userInfo.username }}"
            operator: Equals
            value: "system:serviceaccount:kube-system:db-team-sa"
          - key: "{{ request.object.metadata.labels.team || 'missing' }}"
            operator: NotEquals
            value: "db"

---
# Kyverno policy to prevent db-team-sa from modifying namespace labels
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: prevent-db-team-label-modification
  annotations:
    policies.kyverno.io/title: "Prevent DB Team Label Modification"
    policies.kyverno.io/category: "Security"
    policies.kyverno.io/description: "Prevent db-team-sa from creating namespaces or modifying team labels"
spec:
  validationFailureAction: enforce
  background: false
  rules:
  - name: prevent-namespace-creation
    match:
      any:
      - resources:
          kinds:
          - Namespace
          operations:
          - CREATE
        subjects:
        - kind: ServiceAccount
          name: db-team-sa
          namespace: kube-system
    validate:
      message: "db-team-sa is not allowed to create namespaces"
      deny: {}
  - name: prevent-team-label-modification
    match:
      any:
      - resources:
          kinds:
          - Namespace
          operations:
          - UPDATE
        subjects:
        - kind: ServiceAccount
          name: db-team-sa
          namespace: kube-system
    validate:
      message: "db-team-sa cannot modify team labels on namespaces"
      deny:
        conditions:
          any:
          - key: "{{ request.object.metadata.labels.team || '' }}"
            operator: NotEquals
            value: "{{ request.oldObject.metadata.labels.team || '' }}"

---
# Example namespace with the required label
apiVersion: v1
kind: Namespace
metadata:
  name: database-production
  labels:
    team: db
