# ClusterRole for Kyverno to manage RoleBindings
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kyverno-generate-rolebindings
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["rolebindings"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding to grant Kyverno permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kyverno-generate-rolebindings
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kyverno-generate-rolebindings
subjects:
- kind: ServiceAccount
  name: kyverno-background-controller
  namespace: kyverno

---
# Service Account for DB team access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-team-sa
  namespace: kube-system
automountServiceAccountToken: false

---
# ClusterRole with full permissions within a namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-team-full-access
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
# Kyverno policy to automatically create RoleBinding in namespaces with team=db label
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: db-team-rolebinding
  annotations:
    policies.kyverno.io/title: "Auto-create RoleBinding for DB Team"
    policies.kyverno.io/category: "RBAC"
    policies.kyverno.io/description: "Automatically creates a RoleBinding granting full access to db-team service account when namespace has team=db label"
spec:
  rules:
  - name: create-db-team-rolebinding
    match:
      any:
      - resources:
          kinds:
          - Namespace
          operations:
          - CREATE
          - UPDATE
    preconditions:
      all:
      - key: "{{ request.object.metadata.labels.team || '' }}"
        operator: Equals
        value: "db"
    generate:
      synchronize: true
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      name: db-team-full-access
      namespace: "{{ request.object.metadata.name }}"
      data:
        metadata:
          name: db-team-full-access
          namespace: "{{ request.object.metadata.name }}"
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: db-team-full-access
        subjects:
        - kind: ServiceAccount
          name: db-team-sa
          namespace: kube-system

---
# Secret to create a long-lived token for the service account (Kubernetes 1.24+)
apiVersion: v1
kind: Secret
metadata:
  name: db-team-sa-token
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: db-team-sa
type: kubernetes.io/service-account-token

---
# ClusterRole to allow db-team-sa to manage team=db namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-team-namespace-manager
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "create", "delete", "patch", "update", "watch"]
  resourceNames: []  # Will be restricted by admission controllers

---
# ClusterRoleBinding to grant namespace management permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: db-team-namespace-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: db-team-namespace-manager
subjects:
- kind: ServiceAccount
  name: db-team-sa
  namespace: kube-system

---
# Kyverno policy to restrict namespace deletion to only team=db namespaces
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-db-team-namespace-deletion
  annotations:
    policies.kyverno.io/title: "Restrict DB Team Namespace Deletion"
    policies.kyverno.io/category: "Security"
    policies.kyverno.io/description: "Only allow db-team-sa to delete namespaces with team=db label"
spec:
  validationFailureAction: enforce
  background: false
  rules:
  - name: allow-db-team-namespace-deletion
    match:
      any:
      - resources:
          kinds:
          - Namespace
          operations:
          - DELETE
    exclude:
      any:
      - subjects:
        - kind: ServiceAccount
          name: db-team-sa
          namespace: kube-system
    validate:
      message: "Only db-team service account can delete namespaces with team=db label"
      deny:
        conditions:
          any:
          - key: "{{ request.object.metadata.labels.team || '' }}"
            operator: Equals
            value: "db"

---
# Example namespace with the required label
apiVersion: v1
kind: Namespace
metadata:
  name: database-production
  labels:
    team: db
